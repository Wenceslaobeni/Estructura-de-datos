----------------------------------------------------------------------------------------
Un grafo dirigido, también llamado digrafo, se caracteriza por tener aristas que apuntan en una dirección específica, estableciendo relaciones unidireccionales entre sus nodos. Esto significa que las conexiones entre los nodos tienen un origen y un destino definidos.
Por ejemplo, un grafo dirigido podría representar las rutas de vuelo entre diferentes ciudades, ya que los vuelos tienen una dirección definida desde el punto de partida hacia el destino.

En contraste, un grafo no dirigido es aquel en el que las aristas no tienen una orientación definida. Esto implica que la conexión entre dos nodos es bidireccional, lo que significa que no hay una distinción clara entre el nodo de origen y el nodo de destino.
Por ejemplo, en una red de carreteras donde las conexiones permiten viajar en ambas direcciones entre ciudades, se usaría un grafo no dirigido para representar esta estructura.
--------------------------------Implentacion en java--------------------------------------------------------
import java.util.*;

public class Main {
    private static class Grafo {
        private int V; // Número de vértices
        private LinkedList<Integer>[] adjList; // Lista de adyacencia

        // Constructor
        public Grafo(int V) {
            this.V = V;
            adjList = new LinkedList[V];
            for (int i = 0; i < V; ++i) {
                adjList[i] = new LinkedList<>();
            }
        }

        // Agregar una arista de v a w
        public void agregarAristaDirigida(int v, int w) {
            adjList[v].add(w);
        }

        // Agregar una arista entre v y w (no dirigida)
        public void agregarAristaNoDirigida(int v, int w) {
            adjList[v].add(w);
            adjList[w].add(v);
        }

        // Imprimir el grafo
        public void imprimirGrafo() {
            for (int i = 0; i < V; ++i) {
                System.out.print("Lista de adyacencia del vértice " + i + ": ");
                for (Integer v : adjList[i]) {
                    System.out.print(v + " ");
                }
                System.out.println();
            }
        }
    }

    // Método main para probar la implementación
    public static void main(String[] args) {
        // Crear un grafo dirigido con 5 vértices
        Grafo grafoDirigido = new Grafo(5);
        grafoDirigido.agregarAristaDirigida(0, 1);
        grafoDirigido.agregarAristaDirigida(0, 4);
        grafoDirigido.agregarAristaDirigida(1, 2);
        grafoDirigido.agregarAristaDirigida(1, 3);
        grafoDirigido.agregarAristaDirigida(1, 4);
        grafoDirigido.agregarAristaDirigida(3, 2);
        grafoDirigido.agregarAristaDirigida(3, 4);

        System.out.println("Grafo Dirigido:");
        grafoDirigido.imprimirGrafo();

        // Crear un grafo no dirigido con 5 vértices
        Grafo grafoNoDirigido = new Grafo(5);
        grafoNoDirigido.agregarAristaNoDirigida(0, 1);
        grafoNoDirigido.agregarAristaNoDirigida(0, 4);
        grafoNoDirigido.agregarAristaNoDirigida(1, 2);
        grafoNoDirigido.agregarAristaNoDirigida(1, 3);
        grafoNoDirigido.agregarAristaNoDirigida(1, 4);
        grafoNoDirigido.agregarAristaNoDirigida(3, 2);
        grafoNoDirigido.agregarAristaNoDirigida(3, 4);

        System.out.println("\nGrafo No Dirigido:");
        grafoNoDirigido.imprimirGrafo();
    }
}
----------------------resultado----------------------------------------------------------------------------
Grafo Dirigido:
Lista de adyacencia del vértice 0: 1 4 
Lista de adyacencia del vértice 1: 2 3 4 
Lista de adyacencia del vértice 2: 
Lista de adyacencia del vértice 3: 2 4 
Lista de adyacencia del vértice 4: 

Grafo No Dirigido:
Lista de adyacencia del vértice 0: 1 4 
Lista de adyacencia del vértice 1: 0 2 3 4 
Lista de adyacencia del vértice 2: 1 3 
Lista de adyacencia del vértice 3: 1 2 4 
Lista de adyacencia del vértice 4: 0 1 3 


...Program finished with exit code 0
Press ENTER to exit console.
