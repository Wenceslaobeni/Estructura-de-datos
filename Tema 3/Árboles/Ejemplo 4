
Dentro de este codio se puede ver el recorrido en postorden
------------------------------------------Ejemplo 4-----------------------------------------------------------

package arbolbinario;

/**
 *
 * @author benit
 */
import java.util.Stack;

public class ArbolBinario {
    Nodo raiz;

    public ArbolBinario() {
        raiz = null;
    }

    // Método para insertar un valor en el árbol
    public void insertar(int valor) {
        raiz = insertarRec(raiz, valor);
    }

    private Nodo insertarRec(Nodo nodo, int valor) {
        if (nodo == null) {
            nodo = new Nodo(valor);
            return nodo;
        }

        if (valor < nodo.valor) {
            nodo.izquierdo = insertarRec(nodo.izquierdo, valor);
        } else if (valor > nodo.valor) {
            nodo.derecho = insertarRec(nodo.derecho, valor);
        }

        return nodo;
    }

    // Método para recorrer el árbol en postorden
    public void postorden(Nodo nodo) {
        if (nodo != null) {
            postorden(nodo.izquierdo);
            postorden(nodo.derecho);
            System.out.print(nodo.valor + " ");
        }
    }

    public static void main(String[] args) {
        ArbolBinario arbol = new ArbolBinario();
        int[] numeros = {50, 30, 70, 20, 40, 60, 80, 10, 25, 35, 45, 55, 65, 75, 85, 15, 5, 90, 95, 100, 28, 33, 38, 42, 52, 58, 63, 68, 78, 83};

        // Insertar los números predefinidos en el árbol
        for (int num : numeros) {
            arbol.insertar(num);
        }

        // Mostrar el árbol en postorden (esto ordenará los números)
        System.out.println("Recorrido postorden (ordenados):");
        arbol.postorden(arbol.raiz);
    }
}
package arbolbinario;


class Nodo {
    int valor;
    Nodo izquierdo, derecho;

    public Nodo(int item) {
        valor = item;
        izquierdo = derecho = null;
    }
}
------------------------------------------resultado-----------------------------------------------------------
run:
Recorrido postorden (ordenados):
5 15 10 28 25 20 33 38 35 42 45 40 30 52 58 55 63 68 65 60 78 75 83 100 95 90 85 80 70 50 BUILD SUCCESSFUL (total time: 0 seconds)
